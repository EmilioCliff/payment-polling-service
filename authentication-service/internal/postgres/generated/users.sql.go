// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    full_name, payd_username, email, password, payd_username_key, payd_password_key, payd_account_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, full_name, email, password, payd_username, payd_account_id, payd_username_key, payd_password_key, created_at
`

type CreateUserParams struct {
	FullName        string `json:"full_name"`
	PaydUsername    string `json:"payd_username"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	PaydUsernameKey string `json:"payd_username_key"`
	PaydPasswordKey string `json:"payd_password_key"`
	PaydAccountID   string `json:"payd_account_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.PaydUsername,
		arg.Email,
		arg.Password,
		arg.PaydUsernameKey,
		arg.PaydPasswordKey,
		arg.PaydAccountID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PaydUsername,
		&i.PaydAccountID,
		&i.PaydUsernameKey,
		&i.PaydPasswordKey,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, email, password, payd_username, payd_account_id, payd_username_key, payd_password_key, created_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PaydUsername,
		&i.PaydAccountID,
		&i.PaydUsernameKey,
		&i.PaydPasswordKey,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, password, payd_username, payd_account_id, payd_username_key, payd_password_key, created_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PaydUsername,
		&i.PaydAccountID,
		&i.PaydUsernameKey,
		&i.PaydPasswordKey,
		&i.CreatedAt,
	)
	return i, err
}
