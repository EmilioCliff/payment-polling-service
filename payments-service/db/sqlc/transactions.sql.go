// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    transaction_id, user_id, action, amount, phone_number, network_node, narration
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING transaction_id, user_id, action, amount, phone_number, network_node, narration, status, created_at
`

type CreateTransactionParams struct {
	TransactionID uuid.UUID `json:"transaction_id"`
	UserID        int64     `json:"user_id"`
	Action        string    `json:"action"`
	Amount        int32     `json:"amount"`
	PhoneNumber   string    `json:"phone_number"`
	NetworkNode   string    `json:"network_node"`
	Narration     string    `json:"narration"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.TransactionID,
		arg.UserID,
		arg.Action,
		arg.Amount,
		arg.PhoneNumber,
		arg.NetworkNode,
		arg.Narration,
	)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.Action,
		&i.Amount,
		&i.PhoneNumber,
		&i.NetworkNode,
		&i.Narration,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT transaction_id, user_id, action, amount, phone_number, network_node, narration, status, created_at FROM transactions
WHERE transaction_id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, transactionID uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.Action,
		&i.Amount,
		&i.PhoneNumber,
		&i.NetworkNode,
		&i.Narration,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET status = $2
WHERE transaction_id = $1
RETURNING transaction_id, user_id, action, amount, phone_number, network_node, narration, status, created_at
`

type UpdateTransactionParams struct {
	TransactionID uuid.UUID `json:"transaction_id"`
	Status        bool      `json:"status"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.TransactionID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.UserID,
		&i.Action,
		&i.Amount,
		&i.PhoneNumber,
		&i.NetworkNode,
		&i.Narration,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
