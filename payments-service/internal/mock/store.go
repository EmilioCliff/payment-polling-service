// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EmilioCliff/payment-polling-app/payment-service/internal/postgres (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./internal/mock/store.go github.com/EmilioCliff/payment-polling-app/payment-service/internal/postgres Store
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	postgres "github.com/EmilioCliff/payment-polling-app/payment-service/internal/postgres"
	generated "github.com/EmilioCliff/payment-polling-app/payment-service/internal/postgres/generated"
	pkg "github.com/EmilioCliff/payment-polling-app/payment-service/pkg"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 generated.CreateTransactionParams) (generated.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(generated.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateTransactions mocks base method.
func (m *MockStore) CreateTransactions(arg0 context.Context, arg1 postgres.InitiatePaymentRequest) (*postgres.InitiatePaymentResponse, *pkg.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactions", arg0, arg1)
	ret0, _ := ret[0].(*postgres.InitiatePaymentResponse)
	ret1, _ := ret[1].(*pkg.Error)
	return ret0, ret1
}

// CreateTransactions indicates an expected call of CreateTransactions.
func (mr *MockStoreMockRecorder) CreateTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactions", reflect.TypeOf((*MockStore)(nil).CreateTransactions), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(arg0 context.Context, arg1 uuid.UUID) (generated.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(generated.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0, arg1)
}

// PollingTransaction mocks base method.
func (m *MockStore) PollingTransaction(arg0 context.Context, arg1 postgres.PollingTransactionRequest) (*postgres.PollingTransactionResponse, *pkg.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollingTransaction", arg0, arg1)
	ret0, _ := ret[0].(*postgres.PollingTransactionResponse)
	ret1, _ := ret[1].(*pkg.Error)
	return ret0, ret1
}

// PollingTransaction indicates an expected call of PollingTransaction.
func (mr *MockStoreMockRecorder) PollingTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollingTransaction", reflect.TypeOf((*MockStore)(nil).PollingTransaction), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockStore) UpdateTransaction(arg0 context.Context, arg1 generated.UpdateTransactionParams) (generated.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(generated.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockStoreMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockStore)(nil).UpdateTransaction), arg0, arg1)
}
