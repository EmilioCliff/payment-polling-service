// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EmilioCliff/payment-polling-service/shared-grpc/pb (interfaces: AuthenticationServiceClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./mock/mock.go github.com/EmilioCliff/payment-polling-service/shared-grpc/pb AuthenticationServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pb "github.com/EmilioCliff/payment-polling-service/shared-grpc/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthenticationServiceClient is a mock of AuthenticationServiceClient interface.
type MockAuthenticationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceClientMockRecorder
}

// MockAuthenticationServiceClientMockRecorder is the mock recorder for MockAuthenticationServiceClient.
type MockAuthenticationServiceClientMockRecorder struct {
	mock *MockAuthenticationServiceClient
}

// NewMockAuthenticationServiceClient creates a new mock instance.
func NewMockAuthenticationServiceClient(ctrl *gomock.Controller) *MockAuthenticationServiceClient {
	mock := &MockAuthenticationServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServiceClient) EXPECT() *MockAuthenticationServiceClientMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockAuthenticationServiceClient) GetUser(arg0 context.Context, arg1 *pb.GetUserRequest, arg2 ...grpc.CallOption) (*pb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*pb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthenticationServiceClientMockRecorder) GetUser(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).GetUser), varargs...)
}

// LoginUser mocks base method.
func (m *MockAuthenticationServiceClient) LoginUser(arg0 context.Context, arg1 *pb.LoginUserRequest, arg2 ...grpc.CallOption) (*pb.LoginUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginUser", varargs...)
	ret0, _ := ret[0].(*pb.LoginUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthenticationServiceClientMockRecorder) LoginUser(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).LoginUser), varargs...)
}

// RegisterUser mocks base method.
func (m *MockAuthenticationServiceClient) RegisterUser(arg0 context.Context, arg1 *pb.RegisterUserRequest, arg2 ...grpc.CallOption) (*pb.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUser", varargs...)
	ret0, _ := ret[0].(*pb.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthenticationServiceClientMockRecorder) RegisterUser(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthenticationServiceClient)(nil).RegisterUser), varargs...)
}
